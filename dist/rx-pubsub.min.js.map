{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///rx-pubsub.min.js","webpack:///webpack/bootstrap cb8233d25c3c302f08b0","webpack:///./src/rx-pubsub.ts","webpack:///./~/rxjs/Subscription.js","webpack:///./~/rxjs/util/root.js","webpack:///./~/rxjs/Subscriber.js","webpack:///./~/rxjs/symbol/rxSubscriber.js","webpack:///./~/rxjs/Observable.js","webpack:///./~/rxjs/Observer.js","webpack:///./~/rxjs/SubjectSubscription.js","webpack:///./~/rxjs/util/ObjectUnsubscribedError.js","webpack:///./~/rxjs/util/errorObject.js","webpack:///./~/rxjs/util/isFunction.js","webpack:///./~/rxjs/Notification.js","webpack:///./~/rxjs/ReplaySubject.js","webpack:///./~/rxjs/Scheduler.js","webpack:///./~/rxjs/Subject.js","webpack:///./~/rxjs/operator/observeOn.js","webpack:///./~/rxjs/scheduler/Action.js","webpack:///./~/rxjs/scheduler/AsyncAction.js","webpack:///./~/rxjs/scheduler/AsyncScheduler.js","webpack:///./~/rxjs/scheduler/QueueAction.js","webpack:///./~/rxjs/scheduler/QueueScheduler.js","webpack:///./~/rxjs/scheduler/queue.js","webpack:///./~/rxjs/symbol/observable.js","webpack:///./~/rxjs/util/UnsubscriptionError.js","webpack:///./~/rxjs/util/isArray.js","webpack:///./~/rxjs/util/isObject.js","webpack:///./~/rxjs/util/toSubscriber.js","webpack:///./~/rxjs/util/tryCatch.js"],"names":["root","factory","exports","module","define","amd","a","i","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","Object","defineProperty","value","ReplaySubject_1","RxPubSub","events","prototype","publish","eventName","data","previousMessagesNr","getSubjectByEventName","next","subscribe","callback","isCallback","subscriber","subscribeOnce","_this","unsubscribe","dispose","console","warn","hasSubscribers","result","hasObservers","getEvents","getSubjects","ReplaySubject","flattenUnsubscriptionErrors","errors","reduce","errs","err","concat","UnsubscriptionError_1","UnsubscriptionError","isArray_1","isObject_1","isFunction_1","tryCatch_1","errorObject_1","Subscription","closed","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","_a","index","len","length","remove","isFunction","trial","tryCatch","errorObject","e","isArray","sub","isObject","push","add","teardown","EMPTY","subscription","_addParent","tmp","Error","subscriptions","subscriptionIndex","indexOf","splice","parent","empty","global","window","self","__extends","d","b","__","constructor","hasOwnProperty","create","Subscription_1","Observer_1","rxSubscriber_1","Subscriber","_super","destinationOrNext","error","complete","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","arguments","destination","SafeSubscriber","rxSubscriber","_next","_error","_complete","_unsubscribeAndRecycle","_parentSubscriber","observerOrNext","context","bind","_context","__tryOrSetError","__tryOrUnsub","fn","root_1","Symbol","for","$$rxSubscriber","toSubscriber_1","observable_1","Observable","_isScalar","_subscribe","lift","operator","observable","source","sink","toSubscriber","_trySubscribe","forEach","PromiseCtor","Rx","config","Promise","resolve","reject","SubjectSubscription","subject","observers","subscriberIndex","ObjectUnsubscribedError","name","stack","message","x","Observable_1","Notification","kind","hasValue","observe","observer","do","accept","nextOrObserver","toObservable","of","throw","createNext","undefinedValueNotification","createError","undefined","createComplete","completeNotification","Subject_1","queue_1","observeOn_1","ObjectUnsubscribedError_1","SubjectSubscription_1","bufferSize","windowTime","scheduler","Number","POSITIVE_INFINITY","_events","_bufferSize","_windowTime","now","_getNow","ReplayEvent","_trimBufferThenGetEvents","hasError","ObserveOnSubscriber","thrownError","queue","eventsCount","spliceCount","time","Math","max","Subject","Scheduler","SchedulerAction","schedule","work","delay","state","Date","Subscriber_1","SubjectSubscriber","AnonymousSubject","copy","slice","asObservable","observeOn","ObserveOnOperator","Notification_1","dispatch","arg","notification","scheduleMessage","ObserveOnMessage","Action","Action_1","AsyncAction","pending","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","execute","_execute","errored","errorValue","actions","Scheduler_1","AsyncScheduler","apply","active","scheduled","action","shift","AsyncAction_1","QueueAction","AsyncScheduler_1","QueueScheduler","QueueAction_1","QueueScheduler_1","getSymbolObservable","$$observable","map","toString","join","Array","tryCatcher","tryCatchTarget"],"mappings":"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","file":"rx-pubsub.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/static/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar ReplaySubject_1 = __webpack_require__(12);\n\t/**\n\t * PubSub service based on RxJs ReplaySubject https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/subjects/replaysubject.md\n\t */\n\tvar RxPubSub = (function () {\n\t    function RxPubSub() {\n\t        /**\n\t         * Object which stores all the events and their ReplaySubject subscriptions registered by the service\n\t         * @type {{}} Object\n\t         */\n\t        this.events = {};\n\t    }\n\t    /**\n\t     * Publish data to an event\n\t     * @param eventName Event which should be fired\n\t     * @param data Data sent to all Subscribers of the event\n\t     * @param previousMessagesNr Maximum element count of the replay buffer\n\t     * @returns {RxPubSub}\n\t     */\n\t    RxPubSub.prototype.publish = function (eventName, data, previousMessagesNr) {\n\t        if (previousMessagesNr === void 0) { previousMessagesNr = 1; }\n\t        // publish data on the specified eventName\n\t        this.getSubjectByEventName(eventName, previousMessagesNr).next(data);\n\t        return this;\n\t    };\n\t    /**\n\t     * Subscribe subscriber/callback to an event\n\t     * @param eventName Event to subscribe to\n\t     * @param callback Callback to be run when the eventName is fired\n\t     * @param previousMessagesNr Maximum element count of the replay buffer\n\t     * @returns {any} Subscription if callback and eventName is provided. FALSE if there is an error\n\t     */\n\t    RxPubSub.prototype.subscribe = function (eventName, callback, previousMessagesNr) {\n\t        if (previousMessagesNr === void 0) { previousMessagesNr = 1; }\n\t        if (!this.isCallback(callback)) {\n\t            return false;\n\t        }\n\t        var subscriber = this.getSubjectByEventName(eventName, previousMessagesNr).subscribe(callback);\n\t        return subscriber;\n\t    };\n\t    /**\n\t     * Subscribe to an event only one single time.\n\t     * After the first publish the Subscriber will be destroyed and will not receive any further data published to its event.\n\t     * @param eventName Event to subscribe to.\n\t     * @param callback The callback which should be called when the publish event is triggered.\n\t     * @returns {any} Subscriber\n\t     */\n\t    RxPubSub.prototype.subscribeOnce = function (eventName, callback) {\n\t        var _this = this;\n\t        if (!this.isCallback(callback)) {\n\t            return false;\n\t        }\n\t        var subscriber = this.getSubjectByEventName(eventName).subscribe(function (data) {\n\t            callback(data);\n\t            _this.unsubscribe(subscriber);\n\t        });\n\t        return subscriber;\n\t    };\n\t    /**\n\t     * Unsubscribe a Subscriber from the event\n\t     * @param subscriber the Subscriber which should be destroyed/unsubscribed\n\t     * @returns {RxPubSub}\n\t     */\n\t    RxPubSub.prototype.unsubscribe = function (subscriber) {\n\t        subscriber.unsubscribe();\n\t        return this;\n\t    };\n\t    /**\n\t     * Unsubscribe all observers from the event and release resources.\n\t     * @param eventName event which should be destroyed.\n\t     * @returns {RxPubSub}\n\t     */\n\t    RxPubSub.prototype.dispose = function (eventName) {\n\t        if (this.events[eventName]) {\n\t            this.events[eventName].unsubscribe();\n\t            delete this.events[eventName];\n\t        }\n\t        else {\n\t            console.warn('The event [' + eventName + '] doesn\\'t exist!');\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t     * Check if a Subject attached to an Event (eventName) has Subscribers\n\t     * @param eventName Name of the event to be checked if it has Subscribers.\n\t     * @returns {boolean} true - if there is at least one Subscriber. false - if there are no Subscribers at all\n\t     */\n\t    RxPubSub.prototype.hasSubscribers = function (eventName) {\n\t        var result = false;\n\t        if (this.events[eventName] && this.events[eventName].hasObservers()) {\n\t            result = true;\n\t        }\n\t        return result;\n\t    };\n\t    /**\n\t     * Retrieve the entire list of the events and the Subjects attached to them\n\t     * @returns {any} Object which contains the list of events and the Subjects attached to them\n\t     */\n\t    RxPubSub.prototype.getEvents = function () {\n\t        return this.events;\n\t    };\n\t    /**\n\t     * Alias of the method getEvents()\n\t     * @returns {any}\n\t     */\n\t    RxPubSub.prototype.getSubjects = function () {\n\t        return this.getEvents();\n\t    };\n\t    /**\n\t     * Create RxJs ReplaySubject for the specified eventName\n\t     * @param eventName Name of the event to which to attach the ReplaySubject object\n\t     * @param previousMessagesNr Maximum element count of the replay buffer\n\t     * @returns {any}\n\t     */\n\t    RxPubSub.prototype.getSubjectByEventName = function (eventName, previousMessagesNr) {\n\t        if (previousMessagesNr === void 0) { previousMessagesNr = 1; }\n\t        // create new Subject if there is not such thing for the specified eventName\n\t        if (!this.events[eventName]) {\n\t            this.events[eventName] = new ReplaySubject_1.ReplaySubject(previousMessagesNr);\n\t        }\n\t        return this.events[eventName];\n\t    };\n\t    /**\n\t     * Check if the provided parameter is a proper function\n\t     * @param callback Function to be checked\n\t     * @returns {boolean} true is the parameter is a function. false - if the parameter is not a function\n\t     */\n\t    RxPubSub.prototype.isCallback = function (callback) {\n\t        if (!callback || typeof callback !== 'function') {\n\t            console.warn('Callback is missing! Subscription cancelled!');\n\t            return false;\n\t        }\n\t        return true;\n\t    };\n\t    return RxPubSub;\n\t}());\n\texports.RxPubSub = RxPubSub;\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar isArray_1 = __webpack_require__(24);\n\tvar isObject_1 = __webpack_require__(25);\n\tvar isFunction_1 = __webpack_require__(10);\n\tvar tryCatch_1 = __webpack_require__(27);\n\tvar errorObject_1 = __webpack_require__(9);\n\tvar UnsubscriptionError_1 = __webpack_require__(23);\n\t/**\n\t * Represents a disposable resource, such as the execution of an Observable. A\n\t * Subscription has one important method, `unsubscribe`, that takes no argument\n\t * and just disposes the resource held by the subscription.\n\t *\n\t * Additionally, subscriptions may be grouped together through the `add()`\n\t * method, which will attach a child Subscription to the current Subscription.\n\t * When a Subscription is unsubscribed, all its children (and its grandchildren)\n\t * will be unsubscribed as well.\n\t *\n\t * @class Subscription\n\t */\n\tvar Subscription = (function () {\n\t    /**\n\t     * @param {function(): void} [unsubscribe] A function describing how to\n\t     * perform the disposal of resources when the `unsubscribe` method is called.\n\t     */\n\t    function Subscription(unsubscribe) {\n\t        /**\n\t         * A flag to indicate whether this Subscription has already been unsubscribed.\n\t         * @type {boolean}\n\t         */\n\t        this.closed = false;\n\t        this._parent = null;\n\t        this._parents = null;\n\t        this._subscriptions = null;\n\t        if (unsubscribe) {\n\t            this._unsubscribe = unsubscribe;\n\t        }\n\t    }\n\t    /**\n\t     * Disposes the resources held by the subscription. May, for instance, cancel\n\t     * an ongoing Observable execution or cancel any other type of work that\n\t     * started when the Subscription was created.\n\t     * @return {void}\n\t     */\n\t    Subscription.prototype.unsubscribe = function () {\n\t        var hasErrors = false;\n\t        var errors;\n\t        if (this.closed) {\n\t            return;\n\t        }\n\t        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n\t        this.closed = true;\n\t        this._parent = null;\n\t        this._parents = null;\n\t        // null out _subscriptions first so any child subscriptions that attempt\n\t        // to remove themselves from this subscription will noop\n\t        this._subscriptions = null;\n\t        var index = -1;\n\t        var len = _parents ? _parents.length : 0;\n\t        // if this._parent is null, then so is this._parents, and we\n\t        // don't have to remove ourselves from any parent subscriptions.\n\t        while (_parent) {\n\t            _parent.remove(this);\n\t            // if this._parents is null or index >= len,\n\t            // then _parent is set to null, and the loop exits\n\t            _parent = ++index < len && _parents[index] || null;\n\t        }\n\t        if (isFunction_1.isFunction(_unsubscribe)) {\n\t            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n\t            if (trial === errorObject_1.errorObject) {\n\t                hasErrors = true;\n\t                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?\n\t                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);\n\t            }\n\t        }\n\t        if (isArray_1.isArray(_subscriptions)) {\n\t            index = -1;\n\t            len = _subscriptions.length;\n\t            while (++index < len) {\n\t                var sub = _subscriptions[index];\n\t                if (isObject_1.isObject(sub)) {\n\t                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n\t                    if (trial === errorObject_1.errorObject) {\n\t                        hasErrors = true;\n\t                        errors = errors || [];\n\t                        var err = errorObject_1.errorObject.e;\n\t                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n\t                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n\t                        }\n\t                        else {\n\t                            errors.push(err);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        if (hasErrors) {\n\t            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n\t        }\n\t    };\n\t    /**\n\t     * Adds a tear down to be called during the unsubscribe() of this\n\t     * Subscription.\n\t     *\n\t     * If the tear down being added is a subscription that is already\n\t     * unsubscribed, is the same reference `add` is being called on, or is\n\t     * `Subscription.EMPTY`, it will not be added.\n\t     *\n\t     * If this subscription is already in an `closed` state, the passed\n\t     * tear down logic will be executed immediately.\n\t     *\n\t     * @param {TeardownLogic} teardown The additional logic to execute on\n\t     * teardown.\n\t     * @return {Subscription} Returns the Subscription used or created to be\n\t     * added to the inner subscriptions list. This Subscription can be used with\n\t     * `remove()` to remove the passed teardown logic from the inner subscriptions\n\t     * list.\n\t     */\n\t    Subscription.prototype.add = function (teardown) {\n\t        if (!teardown || (teardown === Subscription.EMPTY)) {\n\t            return Subscription.EMPTY;\n\t        }\n\t        if (teardown === this) {\n\t            return this;\n\t        }\n\t        var subscription = teardown;\n\t        switch (typeof teardown) {\n\t            case 'function':\n\t                subscription = new Subscription(teardown);\n\t            case 'object':\n\t                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n\t                    return subscription;\n\t                }\n\t                else if (this.closed) {\n\t                    subscription.unsubscribe();\n\t                    return subscription;\n\t                }\n\t                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n\t                    var tmp = subscription;\n\t                    subscription = new Subscription();\n\t                    subscription._subscriptions = [tmp];\n\t                }\n\t                break;\n\t            default:\n\t                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n\t        }\n\t        var subscriptions = this._subscriptions || (this._subscriptions = []);\n\t        subscriptions.push(subscription);\n\t        subscription._addParent(this);\n\t        return subscription;\n\t    };\n\t    /**\n\t     * Removes a Subscription from the internal list of subscriptions that will\n\t     * unsubscribe during the unsubscribe process of this Subscription.\n\t     * @param {Subscription} subscription The subscription to remove.\n\t     * @return {void}\n\t     */\n\t    Subscription.prototype.remove = function (subscription) {\n\t        var subscriptions = this._subscriptions;\n\t        if (subscriptions) {\n\t            var subscriptionIndex = subscriptions.indexOf(subscription);\n\t            if (subscriptionIndex !== -1) {\n\t                subscriptions.splice(subscriptionIndex, 1);\n\t            }\n\t        }\n\t    };\n\t    Subscription.prototype._addParent = function (parent) {\n\t        var _a = this, _parent = _a._parent, _parents = _a._parents;\n\t        if (!_parent || _parent === parent) {\n\t            // If we don't have a parent, or the new parent is the same as the\n\t            // current parent, then set this._parent to the new parent.\n\t            this._parent = parent;\n\t        }\n\t        else if (!_parents) {\n\t            // If there's already one parent, but not multiple, allocate an Array to\n\t            // store the rest of the parent Subscriptions.\n\t            this._parents = [parent];\n\t        }\n\t        else if (_parents.indexOf(parent) === -1) {\n\t            // Only add the new parent to the _parents list if it's not already there.\n\t            _parents.push(parent);\n\t        }\n\t    };\n\t    Subscription.EMPTY = (function (empty) {\n\t        empty.closed = true;\n\t        return empty;\n\t    }(new Subscription()));\n\t    return Subscription;\n\t}());\n\texports.Subscription = Subscription;\n\tfunction flattenUnsubscriptionErrors(errors) {\n\t    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);\n\t}\n\t//# sourceMappingURL=Subscription.js.map\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {\"use strict\";\n\tif (typeof window == 'object' && window.window === window) {\n\t    exports.root = window;\n\t}\n\telse if (typeof self == 'object' && self.self === self) {\n\t    exports.root = self;\n\t}\n\telse if (typeof global == 'object' && global.global === global) {\n\t    exports.root = global;\n\t}\n\telse {\n\t    // Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n\t    // This is needed when used with angular/tsickle which inserts a goog.module statement.\n\t    // Wrap in IIFE\n\t    (function () {\n\t        throw new Error('RxJS could not find any global context (window, self, global)');\n\t    })();\n\t}\n\t//# sourceMappingURL=root.js.map\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar isFunction_1 = __webpack_require__(10);\n\tvar Subscription_1 = __webpack_require__(1);\n\tvar Observer_1 = __webpack_require__(6);\n\tvar rxSubscriber_1 = __webpack_require__(4);\n\t/**\n\t * Implements the {@link Observer} interface and extends the\n\t * {@link Subscription} class. While the {@link Observer} is the public API for\n\t * consuming the values of an {@link Observable}, all Observers get converted to\n\t * a Subscriber, in order to provide Subscription-like capabilities such as\n\t * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n\t * implementing operators, but it is rarely used as a public API.\n\t *\n\t * @class Subscriber<T>\n\t */\n\tvar Subscriber = (function (_super) {\n\t    __extends(Subscriber, _super);\n\t    /**\n\t     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n\t     * defined Observer or a `next` callback function.\n\t     * @param {function(e: ?any): void} [error] The `error` callback of an\n\t     * Observer.\n\t     * @param {function(): void} [complete] The `complete` callback of an\n\t     * Observer.\n\t     */\n\t    function Subscriber(destinationOrNext, error, complete) {\n\t        _super.call(this);\n\t        this.syncErrorValue = null;\n\t        this.syncErrorThrown = false;\n\t        this.syncErrorThrowable = false;\n\t        this.isStopped = false;\n\t        switch (arguments.length) {\n\t            case 0:\n\t                this.destination = Observer_1.empty;\n\t                break;\n\t            case 1:\n\t                if (!destinationOrNext) {\n\t                    this.destination = Observer_1.empty;\n\t                    break;\n\t                }\n\t                if (typeof destinationOrNext === 'object') {\n\t                    if (destinationOrNext instanceof Subscriber) {\n\t                        this.destination = destinationOrNext;\n\t                        this.destination.add(this);\n\t                    }\n\t                    else {\n\t                        this.syncErrorThrowable = true;\n\t                        this.destination = new SafeSubscriber(this, destinationOrNext);\n\t                    }\n\t                    break;\n\t                }\n\t            default:\n\t                this.syncErrorThrowable = true;\n\t                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n\t                break;\n\t        }\n\t    }\n\t    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () { return this; };\n\t    /**\n\t     * A static factory for a Subscriber, given a (potentially partial) definition\n\t     * of an Observer.\n\t     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n\t     * @param {function(e: ?any): void} [error] The `error` callback of an\n\t     * Observer.\n\t     * @param {function(): void} [complete] The `complete` callback of an\n\t     * Observer.\n\t     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n\t     * Observer represented by the given arguments.\n\t     */\n\t    Subscriber.create = function (next, error, complete) {\n\t        var subscriber = new Subscriber(next, error, complete);\n\t        subscriber.syncErrorThrowable = false;\n\t        return subscriber;\n\t    };\n\t    /**\n\t     * The {@link Observer} callback to receive notifications of type `next` from\n\t     * the Observable, with a value. The Observable may call this method 0 or more\n\t     * times.\n\t     * @param {T} [value] The `next` value.\n\t     * @return {void}\n\t     */\n\t    Subscriber.prototype.next = function (value) {\n\t        if (!this.isStopped) {\n\t            this._next(value);\n\t        }\n\t    };\n\t    /**\n\t     * The {@link Observer} callback to receive notifications of type `error` from\n\t     * the Observable, with an attached {@link Error}. Notifies the Observer that\n\t     * the Observable has experienced an error condition.\n\t     * @param {any} [err] The `error` exception.\n\t     * @return {void}\n\t     */\n\t    Subscriber.prototype.error = function (err) {\n\t        if (!this.isStopped) {\n\t            this.isStopped = true;\n\t            this._error(err);\n\t        }\n\t    };\n\t    /**\n\t     * The {@link Observer} callback to receive a valueless notification of type\n\t     * `complete` from the Observable. Notifies the Observer that the Observable\n\t     * has finished sending push-based notifications.\n\t     * @return {void}\n\t     */\n\t    Subscriber.prototype.complete = function () {\n\t        if (!this.isStopped) {\n\t            this.isStopped = true;\n\t            this._complete();\n\t        }\n\t    };\n\t    Subscriber.prototype.unsubscribe = function () {\n\t        if (this.closed) {\n\t            return;\n\t        }\n\t        this.isStopped = true;\n\t        _super.prototype.unsubscribe.call(this);\n\t    };\n\t    Subscriber.prototype._next = function (value) {\n\t        this.destination.next(value);\n\t    };\n\t    Subscriber.prototype._error = function (err) {\n\t        this.destination.error(err);\n\t        this.unsubscribe();\n\t    };\n\t    Subscriber.prototype._complete = function () {\n\t        this.destination.complete();\n\t        this.unsubscribe();\n\t    };\n\t    Subscriber.prototype._unsubscribeAndRecycle = function () {\n\t        var _a = this, _parent = _a._parent, _parents = _a._parents;\n\t        this._parent = null;\n\t        this._parents = null;\n\t        this.unsubscribe();\n\t        this.closed = false;\n\t        this.isStopped = false;\n\t        this._parent = _parent;\n\t        this._parents = _parents;\n\t        return this;\n\t    };\n\t    return Subscriber;\n\t}(Subscription_1.Subscription));\n\texports.Subscriber = Subscriber;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SafeSubscriber = (function (_super) {\n\t    __extends(SafeSubscriber, _super);\n\t    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n\t        _super.call(this);\n\t        this._parentSubscriber = _parentSubscriber;\n\t        var next;\n\t        var context = this;\n\t        if (isFunction_1.isFunction(observerOrNext)) {\n\t            next = observerOrNext;\n\t        }\n\t        else if (observerOrNext) {\n\t            next = observerOrNext.next;\n\t            error = observerOrNext.error;\n\t            complete = observerOrNext.complete;\n\t            if (observerOrNext !== Observer_1.empty) {\n\t                context = Object.create(observerOrNext);\n\t                if (isFunction_1.isFunction(context.unsubscribe)) {\n\t                    this.add(context.unsubscribe.bind(context));\n\t                }\n\t                context.unsubscribe = this.unsubscribe.bind(this);\n\t            }\n\t        }\n\t        this._context = context;\n\t        this._next = next;\n\t        this._error = error;\n\t        this._complete = complete;\n\t    }\n\t    SafeSubscriber.prototype.next = function (value) {\n\t        if (!this.isStopped && this._next) {\n\t            var _parentSubscriber = this._parentSubscriber;\n\t            if (!_parentSubscriber.syncErrorThrowable) {\n\t                this.__tryOrUnsub(this._next, value);\n\t            }\n\t            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n\t                this.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    SafeSubscriber.prototype.error = function (err) {\n\t        if (!this.isStopped) {\n\t            var _parentSubscriber = this._parentSubscriber;\n\t            if (this._error) {\n\t                if (!_parentSubscriber.syncErrorThrowable) {\n\t                    this.__tryOrUnsub(this._error, err);\n\t                    this.unsubscribe();\n\t                }\n\t                else {\n\t                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n\t                    this.unsubscribe();\n\t                }\n\t            }\n\t            else if (!_parentSubscriber.syncErrorThrowable) {\n\t                this.unsubscribe();\n\t                throw err;\n\t            }\n\t            else {\n\t                _parentSubscriber.syncErrorValue = err;\n\t                _parentSubscriber.syncErrorThrown = true;\n\t                this.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    SafeSubscriber.prototype.complete = function () {\n\t        if (!this.isStopped) {\n\t            var _parentSubscriber = this._parentSubscriber;\n\t            if (this._complete) {\n\t                if (!_parentSubscriber.syncErrorThrowable) {\n\t                    this.__tryOrUnsub(this._complete);\n\t                    this.unsubscribe();\n\t                }\n\t                else {\n\t                    this.__tryOrSetError(_parentSubscriber, this._complete);\n\t                    this.unsubscribe();\n\t                }\n\t            }\n\t            else {\n\t                this.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n\t        try {\n\t            fn.call(this._context, value);\n\t        }\n\t        catch (err) {\n\t            this.unsubscribe();\n\t            throw err;\n\t        }\n\t    };\n\t    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n\t        try {\n\t            fn.call(this._context, value);\n\t        }\n\t        catch (err) {\n\t            parent.syncErrorValue = err;\n\t            parent.syncErrorThrown = true;\n\t            return true;\n\t        }\n\t        return false;\n\t    };\n\t    SafeSubscriber.prototype._unsubscribe = function () {\n\t        var _parentSubscriber = this._parentSubscriber;\n\t        this._context = null;\n\t        this._parentSubscriber = null;\n\t        _parentSubscriber.unsubscribe();\n\t    };\n\t    return SafeSubscriber;\n\t}(Subscriber));\n\t//# sourceMappingURL=Subscriber.js.map\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(2);\n\tvar Symbol = root_1.root.Symbol;\n\texports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n\t    Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\t/**\n\t * @deprecated use rxSubscriber instead\n\t */\n\texports.$$rxSubscriber = exports.rxSubscriber;\n\t//# sourceMappingURL=rxSubscriber.js.map\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(2);\n\tvar toSubscriber_1 = __webpack_require__(26);\n\tvar observable_1 = __webpack_require__(22);\n\t/**\n\t * A representation of any set of values over any amount of time. This the most basic building block\n\t * of RxJS.\n\t *\n\t * @class Observable<T>\n\t */\n\tvar Observable = (function () {\n\t    /**\n\t     * @constructor\n\t     * @param {Function} subscribe the function that is  called when the Observable is\n\t     * initially subscribed to. This function is given a Subscriber, to which new values\n\t     * can be `next`ed, or an `error` method can be called to raise an error, or\n\t     * `complete` can be called to notify of a successful completion.\n\t     */\n\t    function Observable(subscribe) {\n\t        this._isScalar = false;\n\t        if (subscribe) {\n\t            this._subscribe = subscribe;\n\t        }\n\t    }\n\t    /**\n\t     * Creates a new Observable, with this Observable as the source, and the passed\n\t     * operator defined as the new observable's operator.\n\t     * @method lift\n\t     * @param {Operator} operator the operator defining the operation to take on the observable\n\t     * @return {Observable} a new observable with the Operator applied\n\t     */\n\t    Observable.prototype.lift = function (operator) {\n\t        var observable = new Observable();\n\t        observable.source = this;\n\t        observable.operator = operator;\n\t        return observable;\n\t    };\n\t    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n\t        var operator = this.operator;\n\t        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n\t        if (operator) {\n\t            operator.call(sink, this.source);\n\t        }\n\t        else {\n\t            sink.add(this._trySubscribe(sink));\n\t        }\n\t        if (sink.syncErrorThrowable) {\n\t            sink.syncErrorThrowable = false;\n\t            if (sink.syncErrorThrown) {\n\t                throw sink.syncErrorValue;\n\t            }\n\t        }\n\t        return sink;\n\t    };\n\t    Observable.prototype._trySubscribe = function (sink) {\n\t        try {\n\t            return this._subscribe(sink);\n\t        }\n\t        catch (err) {\n\t            sink.syncErrorThrown = true;\n\t            sink.syncErrorValue = err;\n\t            sink.error(err);\n\t        }\n\t    };\n\t    /**\n\t     * @method forEach\n\t     * @param {Function} next a handler for each value emitted by the observable\n\t     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n\t     * @return {Promise} a promise that either resolves on observable completion or\n\t     *  rejects with the handled error\n\t     */\n\t    Observable.prototype.forEach = function (next, PromiseCtor) {\n\t        var _this = this;\n\t        if (!PromiseCtor) {\n\t            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n\t                PromiseCtor = root_1.root.Rx.config.Promise;\n\t            }\n\t            else if (root_1.root.Promise) {\n\t                PromiseCtor = root_1.root.Promise;\n\t            }\n\t        }\n\t        if (!PromiseCtor) {\n\t            throw new Error('no Promise impl found');\n\t        }\n\t        return new PromiseCtor(function (resolve, reject) {\n\t            // Must be declared in a separate statement to avoid a RefernceError when\n\t            // accessing subscription below in the closure due to Temporal Dead Zone.\n\t            var subscription;\n\t            subscription = _this.subscribe(function (value) {\n\t                if (subscription) {\n\t                    // if there is a subscription, then we can surmise\n\t                    // the next handling is asynchronous. Any errors thrown\n\t                    // need to be rejected explicitly and unsubscribe must be\n\t                    // called manually\n\t                    try {\n\t                        next(value);\n\t                    }\n\t                    catch (err) {\n\t                        reject(err);\n\t                        subscription.unsubscribe();\n\t                    }\n\t                }\n\t                else {\n\t                    // if there is NO subscription, then we're getting a nexted\n\t                    // value synchronously during subscription. We can just call it.\n\t                    // If it errors, Observable's `subscribe` will ensure the\n\t                    // unsubscription logic is called, then synchronously rethrow the error.\n\t                    // After that, Promise will trap the error and send it\n\t                    // down the rejection path.\n\t                    next(value);\n\t                }\n\t            }, reject, resolve);\n\t        });\n\t    };\n\t    Observable.prototype._subscribe = function (subscriber) {\n\t        return this.source.subscribe(subscriber);\n\t    };\n\t    /**\n\t     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n\t     * @method Symbol.observable\n\t     * @return {Observable} this instance of the observable\n\t     */\n\t    Observable.prototype[observable_1.observable] = function () {\n\t        return this;\n\t    };\n\t    // HACK: Since TypeScript inherits static properties too, we have to\n\t    // fight against TypeScript here so Subject can have a different static create signature\n\t    /**\n\t     * Creates a new cold Observable by calling the Observable constructor\n\t     * @static true\n\t     * @owner Observable\n\t     * @method create\n\t     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n\t     * @return {Observable} a new cold observable\n\t     */\n\t    Observable.create = function (subscribe) {\n\t        return new Observable(subscribe);\n\t    };\n\t    return Observable;\n\t}());\n\texports.Observable = Observable;\n\t//# sourceMappingURL=Observable.js.map\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\texports.empty = {\n\t    closed: true,\n\t    next: function (value) { },\n\t    error: function (err) { throw err; },\n\t    complete: function () { }\n\t};\n\t//# sourceMappingURL=Observer.js.map\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscription_1 = __webpack_require__(1);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SubjectSubscription = (function (_super) {\n\t    __extends(SubjectSubscription, _super);\n\t    function SubjectSubscription(subject, subscriber) {\n\t        _super.call(this);\n\t        this.subject = subject;\n\t        this.subscriber = subscriber;\n\t        this.closed = false;\n\t    }\n\t    SubjectSubscription.prototype.unsubscribe = function () {\n\t        if (this.closed) {\n\t            return;\n\t        }\n\t        this.closed = true;\n\t        var subject = this.subject;\n\t        var observers = subject.observers;\n\t        this.subject = null;\n\t        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n\t            return;\n\t        }\n\t        var subscriberIndex = observers.indexOf(this.subscriber);\n\t        if (subscriberIndex !== -1) {\n\t            observers.splice(subscriberIndex, 1);\n\t        }\n\t    };\n\t    return SubjectSubscription;\n\t}(Subscription_1.Subscription));\n\texports.SubjectSubscription = SubjectSubscription;\n\t//# sourceMappingURL=SubjectSubscription.js.map\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\t/**\n\t * An error thrown when an action is invalid because the object has been\n\t * unsubscribed.\n\t *\n\t * @see {@link Subject}\n\t * @see {@link BehaviorSubject}\n\t *\n\t * @class ObjectUnsubscribedError\n\t */\n\tvar ObjectUnsubscribedError = (function (_super) {\n\t    __extends(ObjectUnsubscribedError, _super);\n\t    function ObjectUnsubscribedError() {\n\t        var err = _super.call(this, 'object unsubscribed');\n\t        this.name = err.name = 'ObjectUnsubscribedError';\n\t        this.stack = err.stack;\n\t        this.message = err.message;\n\t    }\n\t    return ObjectUnsubscribedError;\n\t}(Error));\n\texports.ObjectUnsubscribedError = ObjectUnsubscribedError;\n\t//# sourceMappingURL=ObjectUnsubscribedError.js.map\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t// typeof any so that it we don't have to cast when comparing a result to the error object\n\texports.errorObject = { e: {} };\n\t//# sourceMappingURL=errorObject.js.map\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tfunction isFunction(x) {\n\t    return typeof x === 'function';\n\t}\n\texports.isFunction = isFunction;\n\t//# sourceMappingURL=isFunction.js.map\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Observable_1 = __webpack_require__(5);\n\t/**\n\t * Represents a push-based event or value that an {@link Observable} can emit.\n\t * This class is particularly useful for operators that manage notifications,\n\t * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n\t * others. Besides wrapping the actual delivered value, it also annotates it\n\t * with metadata of, for instance, what type of push message it is (`next`,\n\t * `error`, or `complete`).\n\t *\n\t * @see {@link materialize}\n\t * @see {@link dematerialize}\n\t * @see {@link observeOn}\n\t *\n\t * @class Notification<T>\n\t */\n\tvar Notification = (function () {\n\t    function Notification(kind, value, error) {\n\t        this.kind = kind;\n\t        this.value = value;\n\t        this.error = error;\n\t        this.hasValue = kind === 'N';\n\t    }\n\t    /**\n\t     * Delivers to the given `observer` the value wrapped by this Notification.\n\t     * @param {Observer} observer\n\t     * @return\n\t     */\n\t    Notification.prototype.observe = function (observer) {\n\t        switch (this.kind) {\n\t            case 'N':\n\t                return observer.next && observer.next(this.value);\n\t            case 'E':\n\t                return observer.error && observer.error(this.error);\n\t            case 'C':\n\t                return observer.complete && observer.complete();\n\t        }\n\t    };\n\t    /**\n\t     * Given some {@link Observer} callbacks, deliver the value represented by the\n\t     * current Notification to the correctly corresponding callback.\n\t     * @param {function(value: T): void} next An Observer `next` callback.\n\t     * @param {function(err: any): void} [error] An Observer `error` callback.\n\t     * @param {function(): void} [complete] An Observer `complete` callback.\n\t     * @return {any}\n\t     */\n\t    Notification.prototype.do = function (next, error, complete) {\n\t        var kind = this.kind;\n\t        switch (kind) {\n\t            case 'N':\n\t                return next && next(this.value);\n\t            case 'E':\n\t                return error && error(this.error);\n\t            case 'C':\n\t                return complete && complete();\n\t        }\n\t    };\n\t    /**\n\t     * Takes an Observer or its individual callback functions, and calls `observe`\n\t     * or `do` methods accordingly.\n\t     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n\t     * the `next` callback.\n\t     * @param {function(err: any): void} [error] An Observer `error` callback.\n\t     * @param {function(): void} [complete] An Observer `complete` callback.\n\t     * @return {any}\n\t     */\n\t    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n\t        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n\t            return this.observe(nextOrObserver);\n\t        }\n\t        else {\n\t            return this.do(nextOrObserver, error, complete);\n\t        }\n\t    };\n\t    /**\n\t     * Returns a simple Observable that just delivers the notification represented\n\t     * by this Notification instance.\n\t     * @return {any}\n\t     */\n\t    Notification.prototype.toObservable = function () {\n\t        var kind = this.kind;\n\t        switch (kind) {\n\t            case 'N':\n\t                return Observable_1.Observable.of(this.value);\n\t            case 'E':\n\t                return Observable_1.Observable.throw(this.error);\n\t            case 'C':\n\t                return Observable_1.Observable.empty();\n\t        }\n\t        throw new Error('unexpected notification kind value');\n\t    };\n\t    /**\n\t     * A shortcut to create a Notification instance of the type `next` from a\n\t     * given value.\n\t     * @param {T} value The `next` value.\n\t     * @return {Notification<T>} The \"next\" Notification representing the\n\t     * argument.\n\t     */\n\t    Notification.createNext = function (value) {\n\t        if (typeof value !== 'undefined') {\n\t            return new Notification('N', value);\n\t        }\n\t        return this.undefinedValueNotification;\n\t    };\n\t    /**\n\t     * A shortcut to create a Notification instance of the type `error` from a\n\t     * given error.\n\t     * @param {any} [err] The `error` error.\n\t     * @return {Notification<T>} The \"error\" Notification representing the\n\t     * argument.\n\t     */\n\t    Notification.createError = function (err) {\n\t        return new Notification('E', undefined, err);\n\t    };\n\t    /**\n\t     * A shortcut to create a Notification instance of the type `complete`.\n\t     * @return {Notification<any>} The valueless \"complete\" Notification.\n\t     */\n\t    Notification.createComplete = function () {\n\t        return this.completeNotification;\n\t    };\n\t    Notification.completeNotification = new Notification('C');\n\t    Notification.undefinedValueNotification = new Notification('N', undefined);\n\t    return Notification;\n\t}());\n\texports.Notification = Notification;\n\t//# sourceMappingURL=Notification.js.map\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subject_1 = __webpack_require__(14);\n\tvar queue_1 = __webpack_require__(21);\n\tvar Subscription_1 = __webpack_require__(1);\n\tvar observeOn_1 = __webpack_require__(15);\n\tvar ObjectUnsubscribedError_1 = __webpack_require__(8);\n\tvar SubjectSubscription_1 = __webpack_require__(7);\n\t/**\n\t * @class ReplaySubject<T>\n\t */\n\tvar ReplaySubject = (function (_super) {\n\t    __extends(ReplaySubject, _super);\n\t    function ReplaySubject(bufferSize, windowTime, scheduler) {\n\t        if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }\n\t        if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }\n\t        _super.call(this);\n\t        this.scheduler = scheduler;\n\t        this._events = [];\n\t        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n\t        this._windowTime = windowTime < 1 ? 1 : windowTime;\n\t    }\n\t    ReplaySubject.prototype.next = function (value) {\n\t        var now = this._getNow();\n\t        this._events.push(new ReplayEvent(now, value));\n\t        this._trimBufferThenGetEvents();\n\t        _super.prototype.next.call(this, value);\n\t    };\n\t    ReplaySubject.prototype._subscribe = function (subscriber) {\n\t        var _events = this._trimBufferThenGetEvents();\n\t        var scheduler = this.scheduler;\n\t        var subscription;\n\t        if (this.closed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        else if (this.hasError) {\n\t            subscription = Subscription_1.Subscription.EMPTY;\n\t        }\n\t        else if (this.isStopped) {\n\t            subscription = Subscription_1.Subscription.EMPTY;\n\t        }\n\t        else {\n\t            this.observers.push(subscriber);\n\t            subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n\t        }\n\t        if (scheduler) {\n\t            subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));\n\t        }\n\t        var len = _events.length;\n\t        for (var i = 0; i < len && !subscriber.closed; i++) {\n\t            subscriber.next(_events[i].value);\n\t        }\n\t        if (this.hasError) {\n\t            subscriber.error(this.thrownError);\n\t        }\n\t        else if (this.isStopped) {\n\t            subscriber.complete();\n\t        }\n\t        return subscription;\n\t    };\n\t    ReplaySubject.prototype._getNow = function () {\n\t        return (this.scheduler || queue_1.queue).now();\n\t    };\n\t    ReplaySubject.prototype._trimBufferThenGetEvents = function () {\n\t        var now = this._getNow();\n\t        var _bufferSize = this._bufferSize;\n\t        var _windowTime = this._windowTime;\n\t        var _events = this._events;\n\t        var eventsCount = _events.length;\n\t        var spliceCount = 0;\n\t        // Trim events that fall out of the time window.\n\t        // Start at the front of the list. Break early once\n\t        // we encounter an event that falls within the window.\n\t        while (spliceCount < eventsCount) {\n\t            if ((now - _events[spliceCount].time) < _windowTime) {\n\t                break;\n\t            }\n\t            spliceCount++;\n\t        }\n\t        if (eventsCount > _bufferSize) {\n\t            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n\t        }\n\t        if (spliceCount > 0) {\n\t            _events.splice(0, spliceCount);\n\t        }\n\t        return _events;\n\t    };\n\t    return ReplaySubject;\n\t}(Subject_1.Subject));\n\texports.ReplaySubject = ReplaySubject;\n\tvar ReplayEvent = (function () {\n\t    function ReplayEvent(time, value) {\n\t        this.time = time;\n\t        this.value = value;\n\t    }\n\t    return ReplayEvent;\n\t}());\n\t//# sourceMappingURL=ReplaySubject.js.map\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t/**\n\t * An execution context and a data structure to order tasks and schedule their\n\t * execution. Provides a notion of (potentially virtual) time, through the\n\t * `now()` getter method.\n\t *\n\t * Each unit of work in a Scheduler is called an {@link Action}.\n\t *\n\t * ```ts\n\t * class Scheduler {\n\t *   now(): number;\n\t *   schedule(work, delay?, state?): Subscription;\n\t * }\n\t * ```\n\t *\n\t * @class Scheduler\n\t */\n\tvar Scheduler = (function () {\n\t    function Scheduler(SchedulerAction, now) {\n\t        if (now === void 0) { now = Scheduler.now; }\n\t        this.SchedulerAction = SchedulerAction;\n\t        this.now = now;\n\t    }\n\t    /**\n\t     * Schedules a function, `work`, for execution. May happen at some point in\n\t     * the future, according to the `delay` parameter, if specified. May be passed\n\t     * some context object, `state`, which will be passed to the `work` function.\n\t     *\n\t     * The given arguments will be processed an stored as an Action object in a\n\t     * queue of actions.\n\t     *\n\t     * @param {function(state: ?T): ?Subscription} work A function representing a\n\t     * task, or some unit of work to be executed by the Scheduler.\n\t     * @param {number} [delay] Time to wait before executing the work, where the\n\t     * time unit is implicit and defined by the Scheduler itself.\n\t     * @param {T} [state] Some contextual data that the `work` function uses when\n\t     * called by the Scheduler.\n\t     * @return {Subscription} A subscription in order to be able to unsubscribe\n\t     * the scheduled work.\n\t     */\n\t    Scheduler.prototype.schedule = function (work, delay, state) {\n\t        if (delay === void 0) { delay = 0; }\n\t        return new this.SchedulerAction(this, work).schedule(state, delay);\n\t    };\n\t    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n\t    return Scheduler;\n\t}());\n\texports.Scheduler = Scheduler;\n\t//# sourceMappingURL=Scheduler.js.map\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(5);\n\tvar Subscriber_1 = __webpack_require__(3);\n\tvar Subscription_1 = __webpack_require__(1);\n\tvar ObjectUnsubscribedError_1 = __webpack_require__(8);\n\tvar SubjectSubscription_1 = __webpack_require__(7);\n\tvar rxSubscriber_1 = __webpack_require__(4);\n\t/**\n\t * @class SubjectSubscriber<T>\n\t */\n\tvar SubjectSubscriber = (function (_super) {\n\t    __extends(SubjectSubscriber, _super);\n\t    function SubjectSubscriber(destination) {\n\t        _super.call(this, destination);\n\t        this.destination = destination;\n\t    }\n\t    return SubjectSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.SubjectSubscriber = SubjectSubscriber;\n\t/**\n\t * @class Subject<T>\n\t */\n\tvar Subject = (function (_super) {\n\t    __extends(Subject, _super);\n\t    function Subject() {\n\t        _super.call(this);\n\t        this.observers = [];\n\t        this.closed = false;\n\t        this.isStopped = false;\n\t        this.hasError = false;\n\t        this.thrownError = null;\n\t    }\n\t    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {\n\t        return new SubjectSubscriber(this);\n\t    };\n\t    Subject.prototype.lift = function (operator) {\n\t        var subject = new AnonymousSubject(this, this);\n\t        subject.operator = operator;\n\t        return subject;\n\t    };\n\t    Subject.prototype.next = function (value) {\n\t        if (this.closed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        if (!this.isStopped) {\n\t            var observers = this.observers;\n\t            var len = observers.length;\n\t            var copy = observers.slice();\n\t            for (var i = 0; i < len; i++) {\n\t                copy[i].next(value);\n\t            }\n\t        }\n\t    };\n\t    Subject.prototype.error = function (err) {\n\t        if (this.closed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        this.hasError = true;\n\t        this.thrownError = err;\n\t        this.isStopped = true;\n\t        var observers = this.observers;\n\t        var len = observers.length;\n\t        var copy = observers.slice();\n\t        for (var i = 0; i < len; i++) {\n\t            copy[i].error(err);\n\t        }\n\t        this.observers.length = 0;\n\t    };\n\t    Subject.prototype.complete = function () {\n\t        if (this.closed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        this.isStopped = true;\n\t        var observers = this.observers;\n\t        var len = observers.length;\n\t        var copy = observers.slice();\n\t        for (var i = 0; i < len; i++) {\n\t            copy[i].complete();\n\t        }\n\t        this.observers.length = 0;\n\t    };\n\t    Subject.prototype.unsubscribe = function () {\n\t        this.isStopped = true;\n\t        this.closed = true;\n\t        this.observers = null;\n\t    };\n\t    Subject.prototype._trySubscribe = function (subscriber) {\n\t        if (this.closed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        else {\n\t            return _super.prototype._trySubscribe.call(this, subscriber);\n\t        }\n\t    };\n\t    Subject.prototype._subscribe = function (subscriber) {\n\t        if (this.closed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        else if (this.hasError) {\n\t            subscriber.error(this.thrownError);\n\t            return Subscription_1.Subscription.EMPTY;\n\t        }\n\t        else if (this.isStopped) {\n\t            subscriber.complete();\n\t            return Subscription_1.Subscription.EMPTY;\n\t        }\n\t        else {\n\t            this.observers.push(subscriber);\n\t            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n\t        }\n\t    };\n\t    Subject.prototype.asObservable = function () {\n\t        var observable = new Observable_1.Observable();\n\t        observable.source = this;\n\t        return observable;\n\t    };\n\t    Subject.create = function (destination, source) {\n\t        return new AnonymousSubject(destination, source);\n\t    };\n\t    return Subject;\n\t}(Observable_1.Observable));\n\texports.Subject = Subject;\n\t/**\n\t * @class AnonymousSubject<T>\n\t */\n\tvar AnonymousSubject = (function (_super) {\n\t    __extends(AnonymousSubject, _super);\n\t    function AnonymousSubject(destination, source) {\n\t        _super.call(this);\n\t        this.destination = destination;\n\t        this.source = source;\n\t    }\n\t    AnonymousSubject.prototype.next = function (value) {\n\t        var destination = this.destination;\n\t        if (destination && destination.next) {\n\t            destination.next(value);\n\t        }\n\t    };\n\t    AnonymousSubject.prototype.error = function (err) {\n\t        var destination = this.destination;\n\t        if (destination && destination.error) {\n\t            this.destination.error(err);\n\t        }\n\t    };\n\t    AnonymousSubject.prototype.complete = function () {\n\t        var destination = this.destination;\n\t        if (destination && destination.complete) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    AnonymousSubject.prototype._subscribe = function (subscriber) {\n\t        var source = this.source;\n\t        if (source) {\n\t            return this.source.subscribe(subscriber);\n\t        }\n\t        else {\n\t            return Subscription_1.Subscription.EMPTY;\n\t        }\n\t    };\n\t    return AnonymousSubject;\n\t}(Subject));\n\texports.AnonymousSubject = AnonymousSubject;\n\t//# sourceMappingURL=Subject.js.map\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscriber_1 = __webpack_require__(3);\n\tvar Notification_1 = __webpack_require__(11);\n\t/**\n\t * @see {@link Notification}\n\t *\n\t * @param scheduler\n\t * @param delay\n\t * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n\t * @method observeOn\n\t * @owner Observable\n\t */\n\tfunction observeOn(scheduler, delay) {\n\t    if (delay === void 0) { delay = 0; }\n\t    return this.lift(new ObserveOnOperator(scheduler, delay));\n\t}\n\texports.observeOn = observeOn;\n\tvar ObserveOnOperator = (function () {\n\t    function ObserveOnOperator(scheduler, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        this.scheduler = scheduler;\n\t        this.delay = delay;\n\t    }\n\t    ObserveOnOperator.prototype.call = function (subscriber, source) {\n\t        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n\t    };\n\t    return ObserveOnOperator;\n\t}());\n\texports.ObserveOnOperator = ObserveOnOperator;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar ObserveOnSubscriber = (function (_super) {\n\t    __extends(ObserveOnSubscriber, _super);\n\t    function ObserveOnSubscriber(destination, scheduler, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        _super.call(this, destination);\n\t        this.scheduler = scheduler;\n\t        this.delay = delay;\n\t    }\n\t    ObserveOnSubscriber.dispatch = function (arg) {\n\t        var notification = arg.notification, destination = arg.destination;\n\t        notification.observe(destination);\n\t        this.unsubscribe();\n\t    };\n\t    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n\t        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n\t    };\n\t    ObserveOnSubscriber.prototype._next = function (value) {\n\t        this.scheduleMessage(Notification_1.Notification.createNext(value));\n\t    };\n\t    ObserveOnSubscriber.prototype._error = function (err) {\n\t        this.scheduleMessage(Notification_1.Notification.createError(err));\n\t    };\n\t    ObserveOnSubscriber.prototype._complete = function () {\n\t        this.scheduleMessage(Notification_1.Notification.createComplete());\n\t    };\n\t    return ObserveOnSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.ObserveOnSubscriber = ObserveOnSubscriber;\n\tvar ObserveOnMessage = (function () {\n\t    function ObserveOnMessage(notification, destination) {\n\t        this.notification = notification;\n\t        this.destination = destination;\n\t    }\n\t    return ObserveOnMessage;\n\t}());\n\texports.ObserveOnMessage = ObserveOnMessage;\n\t//# sourceMappingURL=observeOn.js.map\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscription_1 = __webpack_require__(1);\n\t/**\n\t * A unit of work to be executed in a {@link Scheduler}. An action is typically\n\t * created from within a Scheduler and an RxJS user does not need to concern\n\t * themselves about creating and manipulating an Action.\n\t *\n\t * ```ts\n\t * class Action<T> extends Subscription {\n\t *   new (scheduler: Scheduler, work: (state?: T) => void);\n\t *   schedule(state?: T, delay: number = 0): Subscription;\n\t * }\n\t * ```\n\t *\n\t * @class Action<T>\n\t */\n\tvar Action = (function (_super) {\n\t    __extends(Action, _super);\n\t    function Action(scheduler, work) {\n\t        _super.call(this);\n\t    }\n\t    /**\n\t     * Schedules this action on its parent Scheduler for execution. May be passed\n\t     * some context object, `state`. May happen at some point in the future,\n\t     * according to the `delay` parameter, if specified.\n\t     * @param {T} [state] Some contextual data that the `work` function uses when\n\t     * called by the Scheduler.\n\t     * @param {number} [delay] Time to wait before executing the work, where the\n\t     * time unit is implicit and defined by the Scheduler.\n\t     * @return {void}\n\t     */\n\t    Action.prototype.schedule = function (state, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        return this;\n\t    };\n\t    return Action;\n\t}(Subscription_1.Subscription));\n\texports.Action = Action;\n\t//# sourceMappingURL=Action.js.map\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar root_1 = __webpack_require__(2);\n\tvar Action_1 = __webpack_require__(16);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar AsyncAction = (function (_super) {\n\t    __extends(AsyncAction, _super);\n\t    function AsyncAction(scheduler, work) {\n\t        _super.call(this, scheduler, work);\n\t        this.scheduler = scheduler;\n\t        this.work = work;\n\t        this.pending = false;\n\t    }\n\t    AsyncAction.prototype.schedule = function (state, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        if (this.closed) {\n\t            return this;\n\t        }\n\t        // Always replace the current state with the new state.\n\t        this.state = state;\n\t        // Set the pending flag indicating that this action has been scheduled, or\n\t        // has recursively rescheduled itself.\n\t        this.pending = true;\n\t        var id = this.id;\n\t        var scheduler = this.scheduler;\n\t        //\n\t        // Important implementation note:\n\t        //\n\t        // Actions only execute once by default, unless rescheduled from within the\n\t        // scheduled callback. This allows us to implement single and repeat\n\t        // actions via the same code path, without adding API surface area, as well\n\t        // as mimic traditional recursion but across asynchronous boundaries.\n\t        //\n\t        // However, JS runtimes and timers distinguish between intervals achieved by\n\t        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n\t        // serial `setTimeout` calls can be individually delayed, which delays\n\t        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n\t        // guarantee the interval callback will be invoked more precisely to the\n\t        // interval period, regardless of load.\n\t        //\n\t        // Therefore, we use `setInterval` to schedule single and repeat actions.\n\t        // If the action reschedules itself with the same delay, the interval is not\n\t        // canceled. If the action doesn't reschedule, or reschedules with a\n\t        // different delay, the interval will be canceled after scheduled callback\n\t        // execution.\n\t        //\n\t        if (id != null) {\n\t            this.id = this.recycleAsyncId(scheduler, id, delay);\n\t        }\n\t        this.delay = delay;\n\t        // If this action has already an async Id, don't request a new one.\n\t        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\t        return this;\n\t    };\n\t    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n\t    };\n\t    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        // If this action is rescheduled with the same delay time, don't clear the interval id.\n\t        if (delay !== null && this.delay === delay && this.pending === false) {\n\t            return id;\n\t        }\n\t        // Otherwise, if the action's delay time is different from the current delay,\n\t        // or the action has been rescheduled before it's executed, clear the interval id\n\t        return root_1.root.clearInterval(id) && undefined || undefined;\n\t    };\n\t    /**\n\t     * Immediately executes this action and the `work` it contains.\n\t     * @return {any}\n\t     */\n\t    AsyncAction.prototype.execute = function (state, delay) {\n\t        if (this.closed) {\n\t            return new Error('executing a cancelled action');\n\t        }\n\t        this.pending = false;\n\t        var error = this._execute(state, delay);\n\t        if (error) {\n\t            return error;\n\t        }\n\t        else if (this.pending === false && this.id != null) {\n\t            // Dequeue if the action didn't reschedule itself. Don't call\n\t            // unsubscribe(), because the action could reschedule later.\n\t            // For example:\n\t            // ```\n\t            // scheduler.schedule(function doWork(counter) {\n\t            //   /* ... I'm a busy worker bee ... */\n\t            //   var originalAction = this;\n\t            //   /* wait 100ms before rescheduling the action */\n\t            //   setTimeout(function () {\n\t            //     originalAction.schedule(counter + 1);\n\t            //   }, 100);\n\t            // }, 1000);\n\t            // ```\n\t            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n\t        }\n\t    };\n\t    AsyncAction.prototype._execute = function (state, delay) {\n\t        var errored = false;\n\t        var errorValue = undefined;\n\t        try {\n\t            this.work(state);\n\t        }\n\t        catch (e) {\n\t            errored = true;\n\t            errorValue = !!e && e || new Error(e);\n\t        }\n\t        if (errored) {\n\t            this.unsubscribe();\n\t            return errorValue;\n\t        }\n\t    };\n\t    AsyncAction.prototype._unsubscribe = function () {\n\t        var id = this.id;\n\t        var scheduler = this.scheduler;\n\t        var actions = scheduler.actions;\n\t        var index = actions.indexOf(this);\n\t        this.work = null;\n\t        this.delay = null;\n\t        this.state = null;\n\t        this.pending = false;\n\t        this.scheduler = null;\n\t        if (index !== -1) {\n\t            actions.splice(index, 1);\n\t        }\n\t        if (id != null) {\n\t            this.id = this.recycleAsyncId(scheduler, id, null);\n\t        }\n\t    };\n\t    return AsyncAction;\n\t}(Action_1.Action));\n\texports.AsyncAction = AsyncAction;\n\t//# sourceMappingURL=AsyncAction.js.map\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Scheduler_1 = __webpack_require__(13);\n\tvar AsyncScheduler = (function (_super) {\n\t    __extends(AsyncScheduler, _super);\n\t    function AsyncScheduler() {\n\t        _super.apply(this, arguments);\n\t        this.actions = [];\n\t        /**\n\t         * A flag to indicate whether the Scheduler is currently executing a batch of\n\t         * queued actions.\n\t         * @type {boolean}\n\t         */\n\t        this.active = false;\n\t        /**\n\t         * An internal ID used to track the latest asynchronous task such as those\n\t         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n\t         * others.\n\t         * @type {any}\n\t         */\n\t        this.scheduled = undefined;\n\t    }\n\t    AsyncScheduler.prototype.flush = function (action) {\n\t        var actions = this.actions;\n\t        if (this.active) {\n\t            actions.push(action);\n\t            return;\n\t        }\n\t        var error;\n\t        this.active = true;\n\t        do {\n\t            if (error = action.execute(action.state, action.delay)) {\n\t                break;\n\t            }\n\t        } while (action = actions.shift()); // exhaust the scheduler queue\n\t        this.active = false;\n\t        if (error) {\n\t            while (action = actions.shift()) {\n\t                action.unsubscribe();\n\t            }\n\t            throw error;\n\t        }\n\t    };\n\t    return AsyncScheduler;\n\t}(Scheduler_1.Scheduler));\n\texports.AsyncScheduler = AsyncScheduler;\n\t//# sourceMappingURL=AsyncScheduler.js.map\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar AsyncAction_1 = __webpack_require__(17);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar QueueAction = (function (_super) {\n\t    __extends(QueueAction, _super);\n\t    function QueueAction(scheduler, work) {\n\t        _super.call(this, scheduler, work);\n\t        this.scheduler = scheduler;\n\t        this.work = work;\n\t    }\n\t    QueueAction.prototype.schedule = function (state, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        if (delay > 0) {\n\t            return _super.prototype.schedule.call(this, state, delay);\n\t        }\n\t        this.delay = delay;\n\t        this.state = state;\n\t        this.scheduler.flush(this);\n\t        return this;\n\t    };\n\t    QueueAction.prototype.execute = function (state, delay) {\n\t        return (delay > 0 || this.closed) ?\n\t            _super.prototype.execute.call(this, state, delay) :\n\t            this._execute(state, delay);\n\t    };\n\t    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n\t        if (delay === void 0) { delay = 0; }\n\t        // If delay exists and is greater than 0, or if the delay is null (the\n\t        // action wasn't rescheduled) but was originally scheduled as an async\n\t        // action, then recycle as an async action.\n\t        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n\t            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n\t        }\n\t        // Otherwise flush the scheduler starting with this action.\n\t        return scheduler.flush(this);\n\t    };\n\t    return QueueAction;\n\t}(AsyncAction_1.AsyncAction));\n\texports.QueueAction = QueueAction;\n\t//# sourceMappingURL=QueueAction.js.map\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar AsyncScheduler_1 = __webpack_require__(18);\n\tvar QueueScheduler = (function (_super) {\n\t    __extends(QueueScheduler, _super);\n\t    function QueueScheduler() {\n\t        _super.apply(this, arguments);\n\t    }\n\t    return QueueScheduler;\n\t}(AsyncScheduler_1.AsyncScheduler));\n\texports.QueueScheduler = QueueScheduler;\n\t//# sourceMappingURL=QueueScheduler.js.map\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar QueueAction_1 = __webpack_require__(19);\n\tvar QueueScheduler_1 = __webpack_require__(20);\n\t/**\n\t *\n\t * Queue Scheduler\n\t *\n\t * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n\t *\n\t * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n\t *\n\t * When used without delay, it schedules given task synchronously - executes it right when\n\t * it is scheduled. However when called recursively, that is when inside the scheduled task,\n\t * another task is scheduled with queue scheduler, instead of executing immediately as well,\n\t * that task will be put on a queue and wait for current one to finish.\n\t *\n\t * This means that when you execute task with `queue` scheduler, you are sure it will end\n\t * before any other task scheduled with that scheduler will start.\n\t *\n\t * @examples <caption>Schedule recursively first, then do something</caption>\n\t *\n\t * Rx.Scheduler.queue.schedule(() => {\n\t *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n\t *\n\t *   console.log('first');\n\t * });\n\t *\n\t * // Logs:\n\t * // \"first\"\n\t * // \"second\"\n\t *\n\t *\n\t * @example <caption>Reschedule itself recursively</caption>\n\t *\n\t * Rx.Scheduler.queue.schedule(function(state) {\n\t *   if (state !== 0) {\n\t *     console.log('before', state);\n\t *     this.schedule(state - 1); // `this` references currently executing Action,\n\t *                               // which we reschedule with new state\n\t *     console.log('after', state);\n\t *   }\n\t * }, 0, 3);\n\t *\n\t * // In scheduler that runs recursively, you would expect:\n\t * // \"before\", 3\n\t * // \"before\", 2\n\t * // \"before\", 1\n\t * // \"after\", 1\n\t * // \"after\", 2\n\t * // \"after\", 3\n\t *\n\t * // But with queue it logs:\n\t * // \"before\", 3\n\t * // \"after\", 3\n\t * // \"before\", 2\n\t * // \"after\", 2\n\t * // \"before\", 1\n\t * // \"after\", 1\n\t *\n\t *\n\t * @static true\n\t * @name queue\n\t * @owner Scheduler\n\t */\n\texports.queue = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);\n\t//# sourceMappingURL=queue.js.map\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(2);\n\tfunction getSymbolObservable(context) {\n\t    var $$observable;\n\t    var Symbol = context.Symbol;\n\t    if (typeof Symbol === 'function') {\n\t        if (Symbol.observable) {\n\t            $$observable = Symbol.observable;\n\t        }\n\t        else {\n\t            $$observable = Symbol('observable');\n\t            Symbol.observable = $$observable;\n\t        }\n\t    }\n\t    else {\n\t        $$observable = '@@observable';\n\t    }\n\t    return $$observable;\n\t}\n\texports.getSymbolObservable = getSymbolObservable;\n\texports.observable = getSymbolObservable(root_1.root);\n\t/**\n\t * @deprecated use observable instead\n\t */\n\texports.$$observable = exports.observable;\n\t//# sourceMappingURL=observable.js.map\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\t/**\n\t * An error thrown when one or more errors have occurred during the\n\t * `unsubscribe` of a {@link Subscription}.\n\t */\n\tvar UnsubscriptionError = (function (_super) {\n\t    __extends(UnsubscriptionError, _super);\n\t    function UnsubscriptionError(errors) {\n\t        _super.call(this);\n\t        this.errors = errors;\n\t        var err = Error.call(this, errors ?\n\t            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n\t        this.name = err.name = 'UnsubscriptionError';\n\t        this.stack = err.stack;\n\t        this.message = err.message;\n\t    }\n\t    return UnsubscriptionError;\n\t}(Error));\n\texports.UnsubscriptionError = UnsubscriptionError;\n\t//# sourceMappingURL=UnsubscriptionError.js.map\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\texports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n\t//# sourceMappingURL=isArray.js.map\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tfunction isObject(x) {\n\t    return x != null && typeof x === 'object';\n\t}\n\texports.isObject = isObject;\n\t//# sourceMappingURL=isObject.js.map\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Subscriber_1 = __webpack_require__(3);\n\tvar rxSubscriber_1 = __webpack_require__(4);\n\tvar Observer_1 = __webpack_require__(6);\n\tfunction toSubscriber(nextOrObserver, error, complete) {\n\t    if (nextOrObserver) {\n\t        if (nextOrObserver instanceof Subscriber_1.Subscriber) {\n\t            return nextOrObserver;\n\t        }\n\t        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {\n\t            return nextOrObserver[rxSubscriber_1.rxSubscriber]();\n\t        }\n\t    }\n\t    if (!nextOrObserver && !error && !complete) {\n\t        return new Subscriber_1.Subscriber(Observer_1.empty);\n\t    }\n\t    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n\t}\n\texports.toSubscriber = toSubscriber;\n\t//# sourceMappingURL=toSubscriber.js.map\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar errorObject_1 = __webpack_require__(9);\n\tvar tryCatchTarget;\n\tfunction tryCatcher() {\n\t    try {\n\t        return tryCatchTarget.apply(this, arguments);\n\t    }\n\t    catch (e) {\n\t        errorObject_1.errorObject.e = e;\n\t        return errorObject_1.errorObject;\n\t    }\n\t}\n\tfunction tryCatch(fn) {\n\t    tryCatchTarget = fn;\n\t    return tryCatcher;\n\t}\n\texports.tryCatch = tryCatch;\n\t;\n\t//# sourceMappingURL=tryCatch.js.map\n\n/***/ })\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// rx-pubsub.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/static/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap cb8233d25c3c302f08b0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ReplaySubject_1 = require(\"rxjs/ReplaySubject\");\n/**\n * PubSub service based on RxJs ReplaySubject https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/subjects/replaysubject.md\n */\nvar RxPubSub = (function () {\n    function RxPubSub() {\n        /**\n         * Object which stores all the events and their ReplaySubject subscriptions registered by the service\n         * @type {{}} Object\n         */\n        this.events = {};\n    }\n    /**\n     * Publish data to an event\n     * @param eventName Event which should be fired\n     * @param data Data sent to all Subscribers of the event\n     * @param previousMessagesNr Maximum element count of the replay buffer\n     * @returns {RxPubSub}\n     */\n    RxPubSub.prototype.publish = function (eventName, data, previousMessagesNr) {\n        if (previousMessagesNr === void 0) { previousMessagesNr = 1; }\n        // publish data on the specified eventName\n        this.getSubjectByEventName(eventName, previousMessagesNr).next(data);\n        return this;\n    };\n    /**\n     * Subscribe subscriber/callback to an event\n     * @param eventName Event to subscribe to\n     * @param callback Callback to be run when the eventName is fired\n     * @param previousMessagesNr Maximum element count of the replay buffer\n     * @returns {any} Subscription if callback and eventName is provided. FALSE if there is an error\n     */\n    RxPubSub.prototype.subscribe = function (eventName, callback, previousMessagesNr) {\n        if (previousMessagesNr === void 0) { previousMessagesNr = 1; }\n        if (!this.isCallback(callback)) {\n            return false;\n        }\n        var subscriber = this.getSubjectByEventName(eventName, previousMessagesNr).subscribe(callback);\n        return subscriber;\n    };\n    /**\n     * Subscribe to an event only one single time.\n     * After the first publish the Subscriber will be destroyed and will not receive any further data published to its event.\n     * @param eventName Event to subscribe to.\n     * @param callback The callback which should be called when the publish event is triggered.\n     * @returns {any} Subscriber\n     */\n    RxPubSub.prototype.subscribeOnce = function (eventName, callback) {\n        var _this = this;\n        if (!this.isCallback(callback)) {\n            return false;\n        }\n        var subscriber = this.getSubjectByEventName(eventName).subscribe(function (data) {\n            callback(data);\n            _this.unsubscribe(subscriber);\n        });\n        return subscriber;\n    };\n    /**\n     * Unsubscribe a Subscriber from the event\n     * @param subscriber the Subscriber which should be destroyed/unsubscribed\n     * @returns {RxPubSub}\n     */\n    RxPubSub.prototype.unsubscribe = function (subscriber) {\n        subscriber.unsubscribe();\n        return this;\n    };\n    /**\n     * Unsubscribe all observers from the event and release resources.\n     * @param eventName event which should be destroyed.\n     * @returns {RxPubSub}\n     */\n    RxPubSub.prototype.dispose = function (eventName) {\n        if (this.events[eventName]) {\n            this.events[eventName].unsubscribe();\n            delete this.events[eventName];\n        }\n        else {\n            console.warn('The event [' + eventName + '] doesn\\'t exist!');\n        }\n        return this;\n    };\n    /**\n     * Check if a Subject attached to an Event (eventName) has Subscribers\n     * @param eventName Name of the event to be checked if it has Subscribers.\n     * @returns {boolean} true - if there is at least one Subscriber. false - if there are no Subscribers at all\n     */\n    RxPubSub.prototype.hasSubscribers = function (eventName) {\n        var result = false;\n        if (this.events[eventName] && this.events[eventName].hasObservers()) {\n            result = true;\n        }\n        return result;\n    };\n    /**\n     * Retrieve the entire list of the events and the Subjects attached to them\n     * @returns {any} Object which contains the list of events and the Subjects attached to them\n     */\n    RxPubSub.prototype.getEvents = function () {\n        return this.events;\n    };\n    /**\n     * Alias of the method getEvents()\n     * @returns {any}\n     */\n    RxPubSub.prototype.getSubjects = function () {\n        return this.getEvents();\n    };\n    /**\n     * Create RxJs ReplaySubject for the specified eventName\n     * @param eventName Name of the event to which to attach the ReplaySubject object\n     * @param previousMessagesNr Maximum element count of the replay buffer\n     * @returns {any}\n     */\n    RxPubSub.prototype.getSubjectByEventName = function (eventName, previousMessagesNr) {\n        if (previousMessagesNr === void 0) { previousMessagesNr = 1; }\n        // create new Subject if there is not such thing for the specified eventName\n        if (!this.events[eventName]) {\n            this.events[eventName] = new ReplaySubject_1.ReplaySubject(previousMessagesNr);\n        }\n        return this.events[eventName];\n    };\n    /**\n     * Check if the provided parameter is a proper function\n     * @param callback Function to be checked\n     * @returns {boolean} true is the parameter is a function. false - if the parameter is not a function\n     */\n    RxPubSub.prototype.isCallback = function (callback) {\n        if (!callback || typeof callback !== 'function') {\n            console.warn('Callback is missing! Subscription cancelled!');\n            return false;\n        }\n        return true;\n    };\n    return RxPubSub;\n}());\nexports.RxPubSub = RxPubSub;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/rx-pubsub.ts\n// module id = 0\n// module chunks = 0","\"use strict\";\nvar isArray_1 = require('./util/isArray');\nvar isObject_1 = require('./util/isObject');\nvar isFunction_1 = require('./util/isFunction');\nvar tryCatch_1 = require('./util/tryCatch');\nvar errorObject_1 = require('./util/errorObject');\nvar UnsubscriptionError_1 = require('./util/UnsubscriptionError');\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription = (function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction_1.isFunction(_unsubscribe)) {\n            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject_1.errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);\n            }\n        }\n        if (isArray_1.isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject_1.isObject(sub)) {\n                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject_1.errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject_1.errorObject.e;\n                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexports.Subscription = Subscription;\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/Subscription.js\n// module id = 1\n// module chunks = 0","\"use strict\";\nif (typeof window == 'object' && window.window === window) {\n    exports.root = window;\n}\nelse if (typeof self == 'object' && self.self === self) {\n    exports.root = self;\n}\nelse if (typeof global == 'object' && global.global === global) {\n    exports.root = global;\n}\nelse {\n    // Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n    // This is needed when used with angular/tsickle which inserts a goog.module statement.\n    // Wrap in IIFE\n    (function () {\n        throw new Error('RxJS could not find any global context (window, self, global)');\n    })();\n}\n//# sourceMappingURL=root.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/root.js\n// module id = 2\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isFunction_1 = require('./util/isFunction');\nvar Subscription_1 = require('./Subscription');\nvar Observer_1 = require('./Observer');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber = (function (_super) {\n    __extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        _super.call(this);\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = Observer_1.empty;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = Observer_1.empty;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    if (destinationOrNext instanceof Subscriber) {\n                        this.destination = destinationOrNext;\n                        this.destination.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription_1.Subscription));\nexports.Subscriber = Subscriber;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = (function (_super) {\n    __extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        _super.call(this);\n        this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = this;\n        if (isFunction_1.isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== Observer_1.empty) {\n                context = Object.create(observerOrNext);\n                if (isFunction_1.isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._error) {\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                throw err;\n            }\n            else {\n                _parentSubscriber.syncErrorValue = err;\n                _parentSubscriber.syncErrorThrown = true;\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._complete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._complete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            throw err;\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            parent.syncErrorValue = err;\n            parent.syncErrorThrown = true;\n            return true;\n        }\n        return false;\n    };\n    SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=Subscriber.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/Subscriber.js\n// module id = 3\n// module chunks = 0","\"use strict\";\nvar root_1 = require('../util/root');\nvar Symbol = root_1.root.Symbol;\nexports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n    Symbol.for('rxSubscriber') : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nexports.$$rxSubscriber = exports.rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/symbol/rxSubscriber.js\n// module id = 4\n// module chunks = 0","\"use strict\";\nvar root_1 = require('./util/root');\nvar toSubscriber_1 = require('./util/toSubscriber');\nvar observable_1 = require('./symbol/observable');\n/**\n * A representation of any set of values over any amount of time. This the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable = (function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is  called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this._trySubscribe(sink));\n        }\n        if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n            if (sink.syncErrorThrown) {\n                throw sink.syncErrorValue;\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.syncErrorThrown = true;\n            sink.syncErrorValue = err;\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                if (subscription) {\n                    // if there is a subscription, then we can surmise\n                    // the next handling is asynchronous. Any errors thrown\n                    // need to be rejected explicitly and unsubscribe must be\n                    // called manually\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscription.unsubscribe();\n                    }\n                }\n                else {\n                    // if there is NO subscription, then we're getting a nexted\n                    // value synchronously during subscription. We can just call it.\n                    // If it errors, Observable's `subscribe` will ensure the\n                    // unsubscription logic is called, then synchronously rethrow the error.\n                    // After that, Promise will trap the error and send it\n                    // down the rejection path.\n                    next(value);\n                }\n            }, reject, resolve);\n        });\n    };\n    Observable.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[observable_1.observable] = function () {\n        return this;\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexports.Observable = Observable;\n//# sourceMappingURL=Observable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/Observable.js\n// module id = 5\n// module chunks = 0","\"use strict\";\nexports.empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) { throw err; },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/Observer.js\n// module id = 6\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('./Subscription');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubjectSubscription = (function (_super) {\n    __extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        _super.call(this);\n        this.subject = subject;\n        this.subscriber = subscriber;\n        this.closed = false;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription_1.Subscription));\nexports.SubjectSubscription = SubjectSubscription;\n//# sourceMappingURL=SubjectSubscription.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/SubjectSubscription.js\n// module id = 7\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nvar ObjectUnsubscribedError = (function (_super) {\n    __extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var err = _super.call(this, 'object unsubscribed');\n        this.name = err.name = 'ObjectUnsubscribedError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ObjectUnsubscribedError;\n}(Error));\nexports.ObjectUnsubscribedError = ObjectUnsubscribedError;\n//# sourceMappingURL=ObjectUnsubscribedError.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/ObjectUnsubscribedError.js\n// module id = 8\n// module chunks = 0","\"use strict\";\n// typeof any so that it we don't have to cast when comparing a result to the error object\nexports.errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/errorObject.js\n// module id = 9\n// module chunks = 0","\"use strict\";\nfunction isFunction(x) {\n    return typeof x === 'function';\n}\nexports.isFunction = isFunction;\n//# sourceMappingURL=isFunction.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/isFunction.js\n// module id = 10\n// module chunks = 0","\"use strict\";\nvar Observable_1 = require('./Observable');\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nvar Notification = (function () {\n    function Notification(kind, value, error) {\n        this.kind = kind;\n        this.value = value;\n        this.error = error;\n        this.hasValue = kind === 'N';\n    }\n    /**\n     * Delivers to the given `observer` the value wrapped by this Notification.\n     * @param {Observer} observer\n     * @return\n     */\n    Notification.prototype.observe = function (observer) {\n        switch (this.kind) {\n            case 'N':\n                return observer.next && observer.next(this.value);\n            case 'E':\n                return observer.error && observer.error(this.error);\n            case 'C':\n                return observer.complete && observer.complete();\n        }\n    };\n    /**\n     * Given some {@link Observer} callbacks, deliver the value represented by the\n     * current Notification to the correctly corresponding callback.\n     * @param {function(value: T): void} next An Observer `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.do = function (next, error, complete) {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return next && next(this.value);\n            case 'E':\n                return error && error(this.error);\n            case 'C':\n                return complete && complete();\n        }\n    };\n    /**\n     * Takes an Observer or its individual callback functions, and calls `observe`\n     * or `do` methods accordingly.\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n     * the `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n            return this.observe(nextOrObserver);\n        }\n        else {\n            return this.do(nextOrObserver, error, complete);\n        }\n    };\n    /**\n     * Returns a simple Observable that just delivers the notification represented\n     * by this Notification instance.\n     * @return {any}\n     */\n    Notification.prototype.toObservable = function () {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return Observable_1.Observable.of(this.value);\n            case 'E':\n                return Observable_1.Observable.throw(this.error);\n            case 'C':\n                return Observable_1.Observable.empty();\n        }\n        throw new Error('unexpected notification kind value');\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `next` from a\n     * given value.\n     * @param {T} value The `next` value.\n     * @return {Notification<T>} The \"next\" Notification representing the\n     * argument.\n     */\n    Notification.createNext = function (value) {\n        if (typeof value !== 'undefined') {\n            return new Notification('N', value);\n        }\n        return this.undefinedValueNotification;\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `error` from a\n     * given error.\n     * @param {any} [err] The `error` error.\n     * @return {Notification<T>} The \"error\" Notification representing the\n     * argument.\n     */\n    Notification.createError = function (err) {\n        return new Notification('E', undefined, err);\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `complete`.\n     * @return {Notification<any>} The valueless \"complete\" Notification.\n     */\n    Notification.createComplete = function () {\n        return this.completeNotification;\n    };\n    Notification.completeNotification = new Notification('C');\n    Notification.undefinedValueNotification = new Notification('N', undefined);\n    return Notification;\n}());\nexports.Notification = Notification;\n//# sourceMappingURL=Notification.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/Notification.js\n// module id = 11\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('./Subject');\nvar queue_1 = require('./scheduler/queue');\nvar Subscription_1 = require('./Subscription');\nvar observeOn_1 = require('./operator/observeOn');\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\nvar SubjectSubscription_1 = require('./SubjectSubscription');\n/**\n * @class ReplaySubject<T>\n */\nvar ReplaySubject = (function (_super) {\n    __extends(ReplaySubject, _super);\n    function ReplaySubject(bufferSize, windowTime, scheduler) {\n        if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }\n        if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }\n        _super.call(this);\n        this.scheduler = scheduler;\n        this._events = [];\n        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n        this._windowTime = windowTime < 1 ? 1 : windowTime;\n    }\n    ReplaySubject.prototype.next = function (value) {\n        var now = this._getNow();\n        this._events.push(new ReplayEvent(now, value));\n        this._trimBufferThenGetEvents();\n        _super.prototype.next.call(this, value);\n    };\n    ReplaySubject.prototype._subscribe = function (subscriber) {\n        var _events = this._trimBufferThenGetEvents();\n        var scheduler = this.scheduler;\n        var subscription;\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscription = Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscription = Subscription_1.Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n        }\n        if (scheduler) {\n            subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));\n        }\n        var len = _events.length;\n        for (var i = 0; i < len && !subscriber.closed; i++) {\n            subscriber.next(_events[i].value);\n        }\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n        }\n        return subscription;\n    };\n    ReplaySubject.prototype._getNow = function () {\n        return (this.scheduler || queue_1.queue).now();\n    };\n    ReplaySubject.prototype._trimBufferThenGetEvents = function () {\n        var now = this._getNow();\n        var _bufferSize = this._bufferSize;\n        var _windowTime = this._windowTime;\n        var _events = this._events;\n        var eventsCount = _events.length;\n        var spliceCount = 0;\n        // Trim events that fall out of the time window.\n        // Start at the front of the list. Break early once\n        // we encounter an event that falls within the window.\n        while (spliceCount < eventsCount) {\n            if ((now - _events[spliceCount].time) < _windowTime) {\n                break;\n            }\n            spliceCount++;\n        }\n        if (eventsCount > _bufferSize) {\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n        }\n        if (spliceCount > 0) {\n            _events.splice(0, spliceCount);\n        }\n        return _events;\n    };\n    return ReplaySubject;\n}(Subject_1.Subject));\nexports.ReplaySubject = ReplaySubject;\nvar ReplayEvent = (function () {\n    function ReplayEvent(time, value) {\n        this.time = time;\n        this.value = value;\n    }\n    return ReplayEvent;\n}());\n//# sourceMappingURL=ReplaySubject.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/ReplaySubject.js\n// module id = 12\n// module chunks = 0","\"use strict\";\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nvar Scheduler = (function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) { now = Scheduler.now; }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) { delay = 0; }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n    return Scheduler;\n}());\nexports.Scheduler = Scheduler;\n//# sourceMappingURL=Scheduler.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/Scheduler.js\n// module id = 13\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('./Observable');\nvar Subscriber_1 = require('./Subscriber');\nvar Subscription_1 = require('./Subscription');\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\nvar SubjectSubscription_1 = require('./SubjectSubscription');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * @class SubjectSubscriber<T>\n */\nvar SubjectSubscriber = (function (_super) {\n    __extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        _super.call(this, destination);\n        this.destination = destination;\n    }\n    return SubjectSubscriber;\n}(Subscriber_1.Subscriber));\nexports.SubjectSubscriber = SubjectSubscriber;\n/**\n * @class Subject<T>\n */\nvar Subject = (function (_super) {\n    __extends(Subject, _super);\n    function Subject() {\n        _super.call(this);\n        this.observers = [];\n        this.closed = false;\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable_1.Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable_1.Observable));\nexports.Subject = Subject;\n/**\n * @class AnonymousSubject<T>\n */\nvar AnonymousSubject = (function (_super) {\n    __extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        _super.call(this);\n        this.destination = destination;\n        this.source = source;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription_1.Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\nexports.AnonymousSubject = AnonymousSubject;\n//# sourceMappingURL=Subject.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/Subject.js\n// module id = 14\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Notification_1 = require('../Notification');\n/**\n * @see {@link Notification}\n *\n * @param scheduler\n * @param delay\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method observeOn\n * @owner Observable\n */\nfunction observeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return this.lift(new ObserveOnOperator(scheduler, delay));\n}\nexports.observeOn = observeOn;\nvar ObserveOnOperator = (function () {\n    function ObserveOnOperator(scheduler, delay) {\n        if (delay === void 0) { delay = 0; }\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    };\n    return ObserveOnOperator;\n}());\nexports.ObserveOnOperator = ObserveOnOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ObserveOnSubscriber = (function (_super) {\n    __extends(ObserveOnSubscriber, _super);\n    function ObserveOnSubscriber(destination, scheduler, delay) {\n        if (delay === void 0) { delay = 0; }\n        _super.call(this, destination);\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnSubscriber.dispatch = function (arg) {\n        var notification = arg.notification, destination = arg.destination;\n        notification.observe(destination);\n        this.unsubscribe();\n    };\n    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    };\n    ObserveOnSubscriber.prototype._next = function (value) {\n        this.scheduleMessage(Notification_1.Notification.createNext(value));\n    };\n    ObserveOnSubscriber.prototype._error = function (err) {\n        this.scheduleMessage(Notification_1.Notification.createError(err));\n    };\n    ObserveOnSubscriber.prototype._complete = function () {\n        this.scheduleMessage(Notification_1.Notification.createComplete());\n    };\n    return ObserveOnSubscriber;\n}(Subscriber_1.Subscriber));\nexports.ObserveOnSubscriber = ObserveOnSubscriber;\nvar ObserveOnMessage = (function () {\n    function ObserveOnMessage(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n    return ObserveOnMessage;\n}());\nexports.ObserveOnMessage = ObserveOnMessage;\n//# sourceMappingURL=observeOn.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/operator/observeOn.js\n// module id = 15\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nvar Action = (function (_super) {\n    __extends(Action, _super);\n    function Action(scheduler, work) {\n        _super.call(this);\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        return this;\n    };\n    return Action;\n}(Subscription_1.Subscription));\nexports.Action = Action;\n//# sourceMappingURL=Action.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/scheduler/Action.js\n// module id = 16\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Action_1 = require('./Action');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsyncAction = (function (_super) {\n    __extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // or the action has been rescheduled before it's executed, clear the interval id\n        return root_1.root.clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.delay = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n    };\n    return AsyncAction;\n}(Action_1.Action));\nexports.AsyncAction = AsyncAction;\n//# sourceMappingURL=AsyncAction.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/scheduler/AsyncAction.js\n// module id = 17\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Scheduler_1 = require('../Scheduler');\nvar AsyncScheduler = (function (_super) {\n    __extends(AsyncScheduler, _super);\n    function AsyncScheduler() {\n        _super.apply(this, arguments);\n        this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         */\n        this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         */\n        this.scheduled = undefined;\n    }\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler_1.Scheduler));\nexports.AsyncScheduler = AsyncScheduler;\n//# sourceMappingURL=AsyncScheduler.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/scheduler/AsyncScheduler.js\n// module id = 18\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncAction_1 = require('./AsyncAction');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar QueueAction = (function (_super) {\n    __extends(QueueAction, _super);\n    function QueueAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    QueueAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (delay > 0) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.delay = delay;\n        this.state = state;\n        this.scheduler.flush(this);\n        return this;\n    };\n    QueueAction.prototype.execute = function (state, delay) {\n        return (delay > 0 || this.closed) ?\n            _super.prototype.execute.call(this, state, delay) :\n            this._execute(state, delay);\n    };\n    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Otherwise flush the scheduler starting with this action.\n        return scheduler.flush(this);\n    };\n    return QueueAction;\n}(AsyncAction_1.AsyncAction));\nexports.QueueAction = QueueAction;\n//# sourceMappingURL=QueueAction.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/scheduler/QueueAction.js\n// module id = 19\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar QueueScheduler = (function (_super) {\n    __extends(QueueScheduler, _super);\n    function QueueScheduler() {\n        _super.apply(this, arguments);\n    }\n    return QueueScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.QueueScheduler = QueueScheduler;\n//# sourceMappingURL=QueueScheduler.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/scheduler/QueueScheduler.js\n// module id = 20\n// module chunks = 0","\"use strict\";\nvar QueueAction_1 = require('./QueueAction');\nvar QueueScheduler_1 = require('./QueueScheduler');\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\nexports.queue = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);\n//# sourceMappingURL=queue.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/scheduler/queue.js\n// module id = 21\n// module chunks = 0","\"use strict\";\nvar root_1 = require('../util/root');\nfunction getSymbolObservable(context) {\n    var $$observable;\n    var Symbol = context.Symbol;\n    if (typeof Symbol === 'function') {\n        if (Symbol.observable) {\n            $$observable = Symbol.observable;\n        }\n        else {\n            $$observable = Symbol('observable');\n            Symbol.observable = $$observable;\n        }\n    }\n    else {\n        $$observable = '@@observable';\n    }\n    return $$observable;\n}\nexports.getSymbolObservable = getSymbolObservable;\nexports.observable = getSymbolObservable(root_1.root);\n/**\n * @deprecated use observable instead\n */\nexports.$$observable = exports.observable;\n//# sourceMappingURL=observable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/symbol/observable.js\n// module id = 22\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nvar UnsubscriptionError = (function (_super) {\n    __extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        _super.call(this);\n        this.errors = errors;\n        var err = Error.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n        this.name = err.name = 'UnsubscriptionError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return UnsubscriptionError;\n}(Error));\nexports.UnsubscriptionError = UnsubscriptionError;\n//# sourceMappingURL=UnsubscriptionError.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/UnsubscriptionError.js\n// module id = 23\n// module chunks = 0","\"use strict\";\nexports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/isArray.js\n// module id = 24\n// module chunks = 0","\"use strict\";\nfunction isObject(x) {\n    return x != null && typeof x === 'object';\n}\nexports.isObject = isObject;\n//# sourceMappingURL=isObject.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/isObject.js\n// module id = 25\n// module chunks = 0","\"use strict\";\nvar Subscriber_1 = require('../Subscriber');\nvar rxSubscriber_1 = require('../symbol/rxSubscriber');\nvar Observer_1 = require('../Observer');\nfunction toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber_1.Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {\n            return nextOrObserver[rxSubscriber_1.rxSubscriber]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber_1.Subscriber(Observer_1.empty);\n    }\n    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n}\nexports.toSubscriber = toSubscriber;\n//# sourceMappingURL=toSubscriber.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/toSubscriber.js\n// module id = 26\n// module chunks = 0","\"use strict\";\nvar errorObject_1 = require('./errorObject');\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject_1.errorObject.e = e;\n        return errorObject_1.errorObject;\n    }\n}\nfunction tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\nexports.tryCatch = tryCatch;\n;\n//# sourceMappingURL=tryCatch.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/tryCatch.js\n// module id = 27\n// module chunks = 0"],"sourceRoot":""}